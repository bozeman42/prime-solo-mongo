//1. Create a collection named orders.
db.createCollection('orders');
var orders = db.orders


// Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
orders.insert({orderDate: ISODate('2017-02-03'),orderTotal: 0, lineItems: [{unitPrice:95, quantity: 10,productName:"apple"}]})
orders.insert({orderDate: ISODate('2017-04-04'),orderTotal: 0, lineItems: [{unitPrice:95, quantity: 10,productName:"apple"}]})
orders.insert({orderDate: ISODate('2017-01-02'),orderTotal: 0, lineItems: [{unitPrice:95, quantity: 10,productName:"apple"}]})

//Find all orders and make them look pretty.

orders.find().pretty()

//Find all orders with an orderDate that is after 1/31/2017.

orders.find( {orderDate: {$gt: new Date('2017-01-31')} } )

//Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)

orders.update({orderDate: new Date('2017-02-03')},{$set: {orderTotal: 63}})

// Add another lineItem to the order from 4/4/2017

orders.update({orderDate: ISODate('2017-04-04')},{$push: {lineItems:{unitPrice: 45,quantity: 97,productName: "triscuit"}}})

//Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's

orders.update({orderDate: ISODate('2017-01-02')},{$set: {"lineItems.0.productName": "transistor radios", "lineItems.0.quantity":2}})

//Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and

orders.find({"lineItems.quantity": {$gt: 2, $lt:10}})